/*
 * CREATED ON:    Apr 16, 2006 3:46:34 PM
 * CREATED BY:    Amit Bansil 
 */
package cps.water.moleculedisplay;

import cps.jarch.data.event.tools.DelayedLink;
import cps.jarch.data.event.tools.SimpleLink;
import cps.jarch.gui.util.EDTWorker;
import cps.jarch.util.notes.Nullable;
import cps.water.simulation.Scene;
import cps.water.simulation.SimModel;

import javax.media.opengl.GL;
import javax.media.opengl.glu.GLU;
import javax.vecmath.Color3f;
import javax.vecmath.Tuple3f;
import javax.vecmath.Vector3f;

import java.util.EventObject;
import java.util.concurrent.TimeUnit;

/**
 * <p>Draws a Scenegraph.
 * </p>
 * @version $Id$
 * @author Amit Bansil
 */
abstract class Renderer {
	// ------------------------------------------------------------------------
	//drawing constants
	static final float hSize = 0.1f;
	static final float oSize = 0.16f;
	static final float originSize = 0.1f;
    static final float covBondThickness=.06f;
	 static final float shrinkCoef=3f;//amount to shrink atoms
	 static final Color3f oColor=new Color3f(0.9f,0.9f,0.9f);
     static final Color3f hColor=new Color3f(0.9f,0.0f,0.0f);
     static final Color3f hBondColor=new Color3f(0.0f,0.8f,0.8f);
     static final Color3f boxColor=new Color3f(0.2f,0.2f,0.2f);
	 static int oSlices=12,oStacks=12,hSlices=8,hStacks=8;

	 static int covBondSlices=10;
	// ------------------------------------------------------------------------
    // subsystems
	private final BoxDrawer boxDrawer=new BoxDrawer();
	private final CovBondDrawer covBondDrawer=new CovBondDrawer();
	private final AtomsDrawer atomsDrawer=new AtomsDrawer();
	
	// ------------------------------------------------------------------------
	//scene properties
	//a packed array
	//{molecule 1: oxygen atom: x, y, z, hydrogen atom 1: x, y, z, hydrogen atom 2: x, y z, molecule 2...}
	private float[] atomPositions=new float[0];
	private int moleculeCount;
	private int hBondCount;
	//a packed array
	//{bond 1: source position x,y,z, destination position: x,y,z, bond 2...}
	private float[] hBondPositions=new float[0];
	private final Vector3f boxSize=new Vector3f();
	// ------------------------------------------------------------------------
	//camera properties
	private final float[] translation=new float[3],oldTranslation=new float[3];
	private final float rotateX,rotateY,zoom;
	private boolean shrinkAtoms;
	private long shrinkTime,translationTime;
	private float radiusShrink;
	private float brightness;
	
	synchronized final void readSimModel(@Nullable SimModel simModel) {
		final Scene scene;
		if(simModel==null) {
			moleculeCount=hBondCount=0;
			scene=null;
		}else {
			scene=simModel.getScene();
			moleculeCount=scene.getMoleculeCount();
			hBondCount=scene.getHBondCount();
			if(atomPositions.length<moleculeCount*9)atomPositions=new float[moleculeCount*9];
			if(hBondPositions.length<hBondCount*6)hBondPositions=new float[hBondCount*6];
			scene.getBoundsSize(boxSize);
		}
		for(int i=0,j=0;i<moleculeCount;i++) {
			scene.getAtomPosition(i, Scene.O_ATOM_NUMBER, atomPositions, j);
			j+=3;
			scene.getAtomPosition(i, Scene.H1_ATOM_NUMBER, atomPositions, j);
			j+=3;
			scene.getAtomPosition(i, Scene.H2_ATOM_NUMBER, atomPositions, j);
			j+=3;
		}
		for(int i=0,j=0;i<hBondCount;i++) {
			scene.getHBondSrcPosition(i, hBondPositions, j);
			j+=3;
			scene.getHBondDstPosition(i, hBondPositions, j);
			j+=3;
		}
	}
	synchronized final void readDisplayModel(@Nullable DisplayModel dispalyModel) {
		
	}
	//don't animate any changes till next display
	private final void reset() {
		shrinkTime=-1;
		translationTime=-1;
	}
	
	// ------------------------------------------------------------------------
	// rendering
	private boolean isInitialized=false;
	 void init() {
		isInitialized=false;
	}
	 synchronized void render(GLAccess gla) {
		gla.preDraw();
		if(!isInitialized) {
			gla.initLights();
			covBondDrawer.init(gla);
			atomsDrawer.init(gla);
			boxDrawer.init(gla);
			isInitialized=true;
		}
		
		gla.setBrighness(brightness);
		gla.rotateCamera(rotateX, rotateY, 0, 0, 0, zoom);
		
		//draw sold stuff first
		covBondDrawer.draw(gla,atomPositions,moleculeCount);
		atomsDrawer.draw(gla,atomPositions,radiusShrink,moleculeCount);
		//then draw lines
		boxDrawer.draw(gla,boxSize);
		//bonds
		gla.setColor(color)
		gla.drawLines(hBondPositions, 0, hBondCount);
	}
	 void kill(GLAccess gla) {
		boxDrawer.kill(gla);
		covBondDrawer.kill(gla);
		atomsDrawer.kill(gla);
		isInitialized=false;
	}
	
}


/*

// ------------------------------------------------------------------------
//bindings
private SimModel simModel;
private DisplayModel displayModel;

private final SimpleLink simModelLink=new SimpleLink() {
	 void receive(EventObject event) {
		simModelChanged();
	}
};
private final DelayedLink displayModelLink=DelayedLink.createConditionalLink(
	EDTWorker.getInstance(),5, TimeUnit.MILLISECONDS,new SimpleLink() {
		 void receive(EventObject event) {
			displayModelChanged();
		}
});
 final synchronized void setModels(@Nullable SimModel simM,@Nullable DisplayModel displayM) {
	if(simModel!=null)simModel.getChangeSource().disconnect(simModelLink);
	simModel=simM;
	if(simM!=null) simM.getChangeSource().connect(simModelLink);
	simModelChanged();
	reset();
}
*/