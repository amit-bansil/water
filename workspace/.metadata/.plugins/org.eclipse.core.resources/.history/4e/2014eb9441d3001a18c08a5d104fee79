/*
 * CREATED ON:    Apr 16, 2006 3:46:34 PM
 * CREATED BY:    Amit Bansil 
 */
package cps.water.moleculedisplay;

import cps.jarch.data.event.tools.DelayedLink;
import cps.jarch.data.event.tools.SimpleLink;
import cps.jarch.gui.util.EDTWorker;
import cps.jarch.util.notes.Nullable;
import cps.water.simulation.Scene;
import cps.water.simulation.SimModel;

import javax.media.opengl.GL;
import javax.media.opengl.glu.GLU;
import javax.vecmath.Color3f;
import javax.vecmath.Tuple3f;

import java.util.EventObject;
import java.util.concurrent.TimeUnit;

/**
 * <p>Draws a Scenegraph.
 * </p>
 * @version $Id$
 * @author Amit Bansil
 */
public class Renderer {
	// ------------------------------------------------------------------------
	//drawing constants
	public static final float hSize = 0.1f;
	public static final float oSize = 0.16f;
	public static final float originSize = 0.1f;
    public static final float covBondThickness=.06f;
	public static final float shrinkCoef=3f;//amount to shrink atoms
	public static final Tuple3f oColor=new Tuple3f(0.9f,0.9f,0.9f);
    public static final Tuple3f hColor=new Tuple3f(0.9f,0.0f,0.0f);
    public static final Tuple3f hBondColor=new Tuple3f(0.0f,0.8f,0.8f);
	public static int covBondStacks=1;
	public static int covBondSlices=10;
	// ------------------------------------------------------------------------
    // subsystems
    
	private final Camera camera=new Camera();
	private final BoxDrawer boxDrawer=new BoxDrawer();
	private final CovBondDrawer covBondDrawer=new CovBondDrawer();
	private final 
	
	// ------------------------------------------------------------------------
	//scene properties
	//a packed array
	//{molecule 1: oxygen atom: x, y, z, hydrogen atom 1: x, y, z, hydrogen atom 2: x, y z, molecule 2...}
	private float[] atomPositions=new float[0];
	private int moleculeCount;
	private int hBondCount;
	//a packed array
	//{bond 1: source position x,y,z, destination position: x,y,z, bond 2...}
	private float[] hBondPositions=new float[0];
	private final Tuple3f boxSize;
	// ------------------------------------------------------------------------
	//camera properties
	private final float[] translation=new float[3],oldTranslation=new float[3];
	private final float rotateX,rotateY,zoom;
	private boolean shrinkAtoms;
	private long shrinkTime,translationTime;
	
	private final synchronized void simModelChanged() {
		final Scene scene;
		if(simModel==null) {
			moleculeCount=hBondCount=0;
			scene=null;
		}else {
			scene=simModel.getScene();
			moleculeCount=scene.getMoleculeCount();
			hBondCount=scene.getHBondCount();
			if(atomPositions.length<moleculeCount*9)atomPositions=new float[moleculeCount*9];
			if(hBondPositions.length<hBondCount*6)hBondPositions=new float[hBondCount*6];
			scene.getBoundsSize(boxSize);
		}
		for(int i=0,j=0;i<moleculeCount;i++) {
			scene.getAtomPosition(i, Scene.O_ATOM_NUMBER, atomPositions, j);
			j+=3;
			scene.getAtomPosition(i, Scene.H1_ATOM_NUMBER, atomPositions, j);
			j+=3;
			scene.getAtomPosition(i, Scene.H2_ATOM_NUMBER, atomPositions, j);
			j+=3;
		}
		for(int i=0,j=0;i<hBondCount;i++) {
			scene.getHBondSrcPosition(i, hBondPositions, j);
			j+=3;
			scene.getHBondDstPosition(i, hBondPositions, j);
			j+=3;
		}
		postDisplay();
	}
	private final synchronized void displayModelChanged() {
		
	}
	//don't animate any changes till next display
	private final void reset() {
		shrinkTime=-1;
		translationTime=-1;
	}
	private final void requestUpdateSimModel() {
		
	}
	// ------------------------------------------------------------------------
	//bindings
	private SimModel simModel;
	private DisplayModel displayModel;
	
	private final SimpleLink simModelLink=new SimpleLink() {
		public void receive(EventObject event) {
			simModelChanged();
		}
	};
	private final DelayedLink displayModelLink=DelayedLink.createConditionalLink(
		EDTWorker.getInstance(),5, TimeUnit.MILLISECONDS,new SimpleLink() {
			public void receive(EventObject event) {
				displayModelChanged();
			}
	});
	public final synchronized void setModels(@Nullable SimModel simM,@Nullable DisplayModel displayM) {
		if(simModel!=null)simModel.getChangeSource().disconnect(simModelLink);
		simModel=simM,@Nullable DisplayModel displayM;
		if(simM,@Nullable DisplayModel displayM!=null) simM,@Nullable DisplayModel displayM.getChangeSource().connect(simModelLink);
		simModelChanged();
		reset();
	}
	
	// ------------------------------------------------------------------------
	// rendering

	private final void postDisplay() {
	}
	public synchronized void init(GL gl,GLU glu) {
		
	}
	public synchronized void render(GL gl, GLU glu) {
	}
	
}
final class Camera{
	
}


