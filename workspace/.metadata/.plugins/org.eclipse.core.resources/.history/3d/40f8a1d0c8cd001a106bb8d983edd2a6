/*
 * BoundedRWValueSupport.java
 * CREATED:    Jun 18, 2005 7:12:06 PM
 * AUTHOR:     Amit Bansil
 * PROJECT:    celest-framework-data
 * 
 * Copyright 2005 The Center for Polymer Studies,
 * Boston University, all rights reserved.
 * */
package cps.jarch.data.value.tools;

import java.util.concurrent.locks.ReadWriteLock;

import cps.jarch.data.value.RejectedValueException;
import cps.jarch.util.notes.Nullable;

public class BoundedValue<T extends Comparable<T>> extends
		CheckedValueImp<T> {
	private final T max, min;

	public final @Nullable T getMax() {
		return max;
	}

	public final @Nullable  T getMin() {
		return min;
	}

	public BoundedValue(T current,@Nullable T min,@Nullable T max) {
		this(current,min,max,null);
	}
	public BoundedValue(T current,@Nullable T min,@Nullable T max,@Nullable ReadWriteLock lock) {
		super(current, false,lock);
		// this will always fail if max<min
		if (max!=null && current.compareTo(max) > 0) throw new Error(current + ">" + max);
		else if (min!=null && current.compareTo(min) < 0)
			throw new Error(current + "<" + min);

		this.max = max;
		this.min = min;
	}

	@Override
	protected void check(T newValue) throws RejectedValueException{
		// super will invoke this before max&min are set, so just send value
		// through in that case
		if (( max != null && newValue.compareTo(max) > 0)
				|| ( min != null && newValue.compareTo(min) < 0) )
				throw new RejectedValueException("not in [" + max + ',' + min
						+ ']',newValue,null);
	}
}