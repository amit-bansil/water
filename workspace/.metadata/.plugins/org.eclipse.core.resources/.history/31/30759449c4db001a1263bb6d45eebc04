/*
 * CREATED ON:    Apr 23, 2006 10:56:54 PM
 * CREATED BY:    Amit Bansil 
 */
package cps.water.moleculedisplay;

import cps.water.util.Transform3D;

import javax.vecmath.Matrix4d;
import javax.vecmath.Vector3d;

/**
 * <p>TODO document CovBondDrawer
 * </p>
 * @version $Id$
 * @author Amit Bansil
 */
public class CovBondDrawer {
	private boolean listCreated = false;

	private GLAccess.DisplayList displayList;
	
	public void kill(GLAccess gla) {
		displayList.kill();
	}
	
	public void init(GLAccess gla) {
		if (listCreated) throw new IllegalStateException("list already created");

		float thickness = Renderer.covBondThickness;

		GLAccess.Quadrics quadrics = gla.createQuadrics();

		displayList = gla.beginList();
		//rotate cylinder from z to y axis
		gla.rotate(90,1,0,0);
		gla.setColor(Renderer.oColor);
		quadrics.cylinder(thickness, .5f, Renderer.covBondSlices);
		
		gla.setColor(Renderer.hColor);
		gla.translate(0, 0, .5f);
		quadrics.cylinder(thickness, .5f, Renderer.covBondSlices);

		displayList.end();

		quadrics.kill();

	}
	private final Vector3d base = new Vector3d(),apex = new Vector3d();
	public void draw(GLAccess gla,float[] positions,int count, float[] boxSize) {
		gla.setLightingEnabled(true);
		for(int i=0;i<count*9;) {
			base.set(positions[i],positions[i+1],positions[i+2]);
			i+=3;
			if(!isTooLong(positions,boxSize,i-3,3)) {
				apex.set(positions[i],positions[i+1],positions[i+2]);
				gla.pushMatrix();
				_draw(gla);
				gla.popMatrix();
			}
			i+=3;
			if(!isTooLong(positions,boxSize,i-6,6)) {
				apex.set(positions[i],positions[i+1],positions[i+2]);
				gla.pushMatrix();
				_draw(gla);
				gla.popMatrix();
			}
			i+=3;
		}
	}
	private boolean isTooLong(float[] positions,float[] boxSize,int i,int k) {
		for (int j = 0; j < 3; j++)
			if (Math.abs(positions[j+i]
					- positions[j+i+k]) * 2 > boxSize[j]) return true;
		return false;
	}
	private final Vector3d lenaxis=new Vector3d();
	private void _draw(GLAccess gla) {
		  double R, RXY, phi, theta;
		  //end=apex;
		  //base=start
		  // need to do some preprocessing ... find length of vector
		  /*lenaxis[0] = end[0] - start[0];
		  lenaxis[1] = end[1] - start[1];
		  lenaxis[2] = end[2] - start[2];*/
		  lenaxis.sub(apex,base);
		  //R = lenaxis[0]*lenaxis[0]+lenaxis[1]*lenaxis[1]+lenaxis[2]*lenaxis[2];
		  R=lenaxis.lengthSquared();
		  if (R <= 0.0)
		    return; // early exit if cylinder is of length 0;

		  R = Math.sqrt(R); // evaluation of sqrt() _after_ early exit 

		  // determine phi rotation angle, amount to rotate about y
		  phi = Math.acos(lenaxis.y / R);

		  // determine theta rotation, amount to rotate about z
		  RXY = Math.sqrt(lenaxis.x*lenaxis.x+lenaxis.y*lenaxis.y);
		  if (RXY <= 0.0f) {
		    theta = 0.0f;
		  } else {
		    theta = Math.acos(lenaxis.x / RXY);
		    if (lenaxis.y < 0.0f)
		      theta = (float) (2.0f * Math.PI) - theta;
		  }

		  //gla.pushMatrix(); // setup transform moving cylinder from Z-axis to position
		  gla.translate(base.x, base.y, base.z);
		  if (theta != 0.0f)
			  gla.rotate(((float)(theta / Math.PI) * 180.0f), 0.0f, 0.0f, 1.0f);
		  if (phi != 0.0f)
			  gla.rotate(((float)(phi / Math.PI) * 180.0f), 0.0f, 1.0f, 0.0f);

		  // call utility routine to draw cylinders
		  displayList.call();	    
	}
}
