/*
 * CREATED ON:    Apr 14, 2006 4:08:41 PM
 * CREATED BY:    Amit Bansil 
 */
package cps.water.simulation;

import cps.jarch.util.collections.ArrayFinal;
import cps.jarch.util.notes.Nullable;
import cps.water.simulation.EngineWrapper.Mode;
import cps.water.util.Tuple3f;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>TODO document SimModel
 * </p>
 * @version $Id$
 * @author Amit Bansil
 */
public class SimModel {
	public SimModel(SimConfig intialConfig) {
	}
	
	
	
	private static abstract class DataSet{
		private final String name;
		public DataSet(String name) {
			this.name=name;
		}
		@Override public final String toString() {
			return name;
		}
		public abstract float getValue(SimModel m);
	}
	
	// ------------------------------------------------------------------------
    private int numMols;

    //frame control
    private int frameNumber;
    public final int getFrameNumber(){ return frameNumber; }

    public static final int O_ATOM=2,H1_ATOM=0,H2_ATOM=1;
    private final float[][][] rn;
    
    public final void getAtomPosition(int mol,int atom,float[] dst,int dstStart) {
    	dst[dstStart]=rn[mol][0][atom];
    	dst[dstStart]=rn[mol][1][atom];
    	dst[dstStart]=rn[mol][2][atom];
    }
    
    //ion
    private final double[] xni,yni,zni;
    public final void getIonPosition(int mol,float[] dst,int dstStart) {
    	dst[dstStart]=(float)xni[mol];
    	dst[dstStart+1]=(float)yni[mol];
    	dst[dstStart+2]=(float)zni[mol];
    }
    public 
    

    //velocity
    public final void getAtomVelocity(int mol,int atom,float[] dst,int dstStart) {
    	dst[dstStart]=ve[mol][0][atom];
    	dst[dstStart]=ve[mol][1][atom];
    	dst[dstStart]=ve[mol][2][atom];
    }
    public final float getAtomKE(int mol,int trueAtomNum){ 
        int atom=0;
        switch(trueAtomNum){
            case 0: atom=2; break;
            case 2: atom=1; break;
        }
        return (float)Math.sqrt(ve[mol][VX_FEILD][atom]*ve[mol][VX_FEILD][atom]+
                                ve[mol][VY_FEILD][atom]*ve[mol][VY_FEILD][atom]+
                                ve[mol][VZ_FEILD][atom]*ve[mol][VZ_FEILD][atom]);
    }
    //pe
    private double[] potH2O;
    public final double[] getPE(){ return potH2O; }
    public final double getAtomPE(int num){ return potH2O[num]; }
  	//bonds
  	private int[][] indxww;
    public final int[][] getBonds(){ return indxww; }
    //mode
    enum Mode{KPresKTemp,KDensKTemp,KPresKEn,KDensKEn}
    private Mode mode=Mode.KPresKTemp;

    // ------------------------------------------------------------------------
	public EngineWrapper(SimConfig initialConfig) {
		this.initialConfig = initialConfig;

		ve = raw.ve;
		xni = raw.xni;
		yni = raw.yni;
		zni = raw.zni;
		rn = raw.rn;
		potH2O = raw.potH2O;
		indxww = raw.indxww;
		clear();
	}
	
    public void fullSave(OutputStream os) throws IOException {
		FullConfig.save(raw, os);
	}

	public void fullSave(DataOutputStream os) throws IOException {
		FullConfig.save(raw, os);
	}

	public void save(OutputStream os) throws IOException {
		SimConfig.save(raw, os);
	}

	public void save(DataOutputStream os) throws IOException {
		SimConfig.save(raw, os);
	}


	private int oldLatRes=-1;
	private double oldCut=-1,oldFNum=-1;
	private PELandscapeCalculator landCalc=null;
	
	 public int[] generatePeMatrix(ArrayFinal<Ion> ions, int latRes, double cut, float x) {
		if(landCalc==null||oldLatRes!=latRes||oldCut!=cut)landCalc=new PELandscapeCalculator(latRes,cut);
		if(oldFNum!=getFNum()) { landCalc.readEngineState(raw); oldFNum=getFNum(); }
		landCalc.generatePELandscape(ions, x);
		return landCalc.getLandscape();
	}
	
	 public @Nullable ArrayFinal<Ion> getIons() {
		return raw.ions;
	}

	public void removeIons() {
		raw.remove_ion();
	}
	public void insertIons(@Nullable ArrayFinal<Ion> ions) {
		raw.insert_ion(ions);
	}
	public void insertIons(@Nullable ArrayFinal<Ion> ions,Tuple3f position) {
		raw.insert_ion(ions, position.x, position.y, position.z);
	}
	
	
	 public int getNumBonds() {
		return raw.hbonds;
	}

	 public Tuple3f getBoundsSize() {
		return new Tuple3f((float) raw.bx, (float) raw.by, (float) raw.bz);
	}

	 public void setMode(Mode m) {
		mode = m;
		switch (mode) {
			case KPresKTemp: // '\0'
				raw.kpres = true;
				raw.ktemp = true;
				break;

			case KDensKTemp: // '\001'
				raw.kpres = false;
				raw.ktemp = true;
				break;

			case KPresKEn: // '\002'
				raw.kpres = true;
				raw.ktemp = false;
				break;

			case KDensKEn: // '\003'
				raw.kpres = false;
				raw.ktemp = false;
				break;
		}
	}

	 public boolean getJumped(int mol, int fld) {
		return raw.jumped[mol][fld];
	}

	 public double getPressure() {
		return raw.apres;
	}

	 public void setPressure(double value) {
		raw.setpressure(value);
	}

	 public double getTemp() {
		return raw.atemp;
	}

	 public void setTemp(double value) {
		raw.setemperature(value);
	}

	 public double getEnergy() {
		return 0.0D;
	}

	 public double getDensity() {
		return raw.arho;
	}

	 public void setDensity(double value) {
		raw.setdensity(value);
	}

	 public double getTemperature2() {
		return raw.temp;
	}

	 public double getDensity2() {
		return raw.rho;
	}

	 public double getPressure2() {
		return raw.pres;
	}

	 public double getPE2() {
		return raw.epot;
	}

	 public double getKE2() {
		return raw.ekin;
	}

	 public double getTotalEnergy2() {
		return raw.eges;
	}

	private SimConfig initialConfig;

	 public void step() throws ShakeFailException {
		for (int i = 0; i < frameSteps; i++) {
			raw.step();
			setFNum(getFNum() + 1);
		}

		// ObjLib.boundsSize = getBoundsSize();
	}

	 public void clear() {
		setFNum(0);
		raw.clear();
		removeIons();
		if (initialConfig != null) initialConfig.toData(raw);
		else raw.loadNMolDef(EngineWrapper.numMols);
		EngineWrapper.numMols = raw.mols;
		raw.initial();
		raw.tempav = raw.atemp;
		raw.presav = raw.apres;
		raw.rho = raw.arho;
		raw.hbonds = 0;
		// ObjLib.boundsSize = getBoundsSize();
		if (initialConfig != null) initialConfig.toData(raw);
	}

	private final Engine raw = new Engine();

}
