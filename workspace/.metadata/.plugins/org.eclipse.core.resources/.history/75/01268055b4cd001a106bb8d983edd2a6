package Intermol3D;import cps.water.simulation.internal.EngineWrapper;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JComboBox;import javax.swing.JPanel;import javax.swing.JScrollPane;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.AdjustmentEvent;import java.awt.event.AdjustmentListener;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;public class GraphManager{    private RTGraph graph;    private final ParameterPanel parameterPanel;    private final JComboBox graphChoice;    private final JButton resizeB;    private final JCheckBox avgBox;    private final JPanel hook;    private final EngineWrapper data;        private final String[] names;      //Pe,Ke,Te,volume,pressure,density,temp    //avg Pe,Te,avg Ke,avg Volume,pressure,density,temp        private static final int BUFFER_SIZE=400;    private final float[][] dataBuffer=new float[14][BUFFER_SIZE];    private final double[] totaldata=new double[7];     private int newestPoint=-1;    private double avgPoints=0;    private boolean through=false;        private boolean isParameters;        private void recordData(){        newestPoint++; avgPoints++;        if(newestPoint>=BUFFER_SIZE){            newestPoint=0; through=true;        }        dataBuffer[0][newestPoint]=(float)data.getPE2();        dataBuffer[1][newestPoint]=(float)data.getKE2();        dataBuffer[2][newestPoint]=(float)data.getTotalEnergy2();        dataBuffer[3][newestPoint]=data.getBoundsSize().x*data.getBoundsSize().y*data.getBoundsSize().z;        dataBuffer[4][newestPoint]=(float)data.getPressure2();        dataBuffer[5][newestPoint]=(float)data.getDensity2();        dataBuffer[6][newestPoint]=(float)data.getTemperature2();        totaldata[0]+=data.getPE2();        totaldata[1]+=data.getKE2();        totaldata[2]+=data.getTotalEnergy2();        totaldata[3]+=data.getBoundsSize().x*data.getBoundsSize().y*data.getBoundsSize().z;        totaldata[4]+=data.getPressure2();        totaldata[5]+=data.getDensity2();        totaldata[6]+=data.getTemperature2();        dataBuffer[7][newestPoint]=(float)(totaldata[0]/avgPoints);        dataBuffer[8][newestPoint]=(float)(totaldata[1]/avgPoints);        dataBuffer[9][newestPoint]=(float)(totaldata[2]/avgPoints);        dataBuffer[10][newestPoint]=(float)(totaldata[3]/avgPoints);        dataBuffer[11][newestPoint]=(float)(totaldata[4]/avgPoints);        dataBuffer[12][newestPoint]=(float)(totaldata[5]/avgPoints);        dataBuffer[13][newestPoint]=(float)(totaldata[6]/avgPoints);    }    private void resetAverages(){        avgPoints=0;        totaldata[0]=0;        totaldata[1]=0;        totaldata[2]=0;        totaldata[3]=0;        totaldata[4]=0;        totaldata[5]=0;        totaldata[6]=0;    }    private int graphNum=-1;    private void changeGraph(int index){        if(graphNum==index) return;        graphNum=index;        boolean running=graph.running();        if(running) graph.stop();        graph.flush();        if(running) graph.start();        reloadData();    }    private void reloadData(){        if(through){            graph.recieveData(dataBuffer[graphNum],newestPoint+1,BUFFER_SIZE-(newestPoint+1));            graph.recieveData(dataBuffer[graphNum],0,newestPoint+1);        }else{            graph.recieveData(dataBuffer[graphNum],0,newestPoint+1);        }        redraw();    }        private void resizeGraph(){        if(graph!=null) hook.remove(graph);        hook.setLayout(new BorderLayout(6,0));        graph=null;        if(!hook.isVisible()) return;        if(hook.getSize().width<1||hook.getSize().height<1) return;        graph=new RTGraph(" "/*names[graphNum]*/,hook.getSize().width,hook.getSize().height, .1d, hook);        hook.add(graph,BorderLayout.CENTER);        reloadData();    }    public GraphManager(EngineWrapper d,JComboBox graphMode,JPanel graphPanel,JPanel parameters,JButton reset,JCheckBox avg){        data=d; graphNum=0;        names=new String[7];                      for(int i=1;i<8;i++)            names[i-1]=Const.trans("graph_"+(i));                        resizeB=reset;        resizeB.addActionListener(new ActionListener(){            public void actionPerformed(ActionEvent e){                resizeGraph();            }        });        hook=graphPanel;        hook.addComponentListener(new ComponentAdapter(){            public void componentResized(ComponentEvent e){                resizeGraph();            }        });        resizeGraph();                parameterPanel=new ParameterPanel(names,dataBuffer);                parameters.setLayout(new BorderLayout());        JScrollPane scr=new JScrollPane(parameterPanel,            JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);        //scr.setBorder(BorderFactory.createEmptyBorder(0,2,0,0));        parameters.add(scr);        scr.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener(){        	public void adjustmentValueChanged(AdjustmentEvent e){        		//if(((JScrollBar)e.getSource()).getValueIsAdjusting()) return;        		parameterPanel.repaint();        	}        });        parameters.addComponentListener(new ComponentAdapter(){            public void componentShown(ComponentEvent e){                isParameters=true;                 parameterPanel.setVisible(false);                parameterPanel.setVisible(true);                redraw();            }            public void componentHidden(ComponentEvent e){                isParameters=false;                redraw();            }        });                avgBox=avg;        avgBox.addActionListener(new ActionListener(){            public void actionPerformed(ActionEvent e){                parameterPanel.setAverage(avgBox.isSelected());                redraw();            }        });        graphChoice=graphMode;        for(int i=0;i<7;i++)            graphChoice.addItem(names[i]);        graphChoice.addItemListener(new ItemListener(){            public void itemStateChanged(ItemEvent e){                if(e.getStateChange()==e.SELECTED)                    changeGraph(graphChoice.getSelectedIndex());            }        });    }    public void start(){        if(graph!=null) graph.start();    }    public void step(){        recordData();        if(graph!=null) graph.recieveData(dataBuffer[graphNum],newestPoint,1);                redraw();    }    public void clear(){        resetAverages();                if(graph!=null) graph.flush();        through=false;        newestPoint=-1;    }    public void stop(){        if(graph!=null) graph.stop();    }    private void redraw(){        if(isParameters){        	if(parameterPanel.isVisible())parameterPanel.rebuild(newestPoint);        }else{        	if(graph!=null) graph.drawGraph();        }    }    }