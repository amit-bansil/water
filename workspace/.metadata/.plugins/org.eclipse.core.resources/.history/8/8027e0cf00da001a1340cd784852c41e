/*
 * CREATED ON:    Apr 20, 2006 12:47:27 PM
 * CREATED BY:    Amit Bansil 
 */
package cps.water.simulation;

import cps.jarch.data.DataUtils;
import cps.jarch.data.event.tools.Link;
import cps.jarch.data.event.tools.LinkAdapter;
import cps.jarch.data.value.ROValue;
import cps.jarch.data.value.tools.BoundedValue;
import cps.jarch.gui.components.LayoutUtils;
import cps.jarch.util.misc.LogEx;
import cps.water.ControlFactory;
import cps.water.Model;

import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;

/**
 * <p>TODO document SimulationController
 * </p>
 * @version $Id$
 * @author Amit Bansil
 */
public class SimControls {
	private static final LogEx<SimControls> log = LogEx.createClassLog(SimControls.class);
	//provides access to SimControls.properties
	private static final cps.jarch.gui.resources.MessageBundle res = cps.jarch.gui.resources.MessageBundle
		.create(SimControls.class);
	public SimControls(final ROValue<Model> focusedSelection) {
		DataUtils.linkAndSync(focusedSelection,new Link() {
			@Override public void signal() {
				 InputParameters newInput=focusedSelection.get().getSimModel().getInputParameters();
				 if(input!=null)unlink();
				 if(newInput!=null)link(newInput);
			}
		});
		
		kPres=new JRadioButton("Pressure");
		kDens=new JRadioButton("Density");
		kTemp=new JCheckBox("Temperature");
		ButtonGroup bg=new ButtonGroup();
		bg.add(kPres);
		bg.add(kDens);
		
		//layout
		c=Box.createHorizontalBox();		
		
		//bindings
		//constants->model.mode
		LinkAdapter constantsToModelLink=new LinkAdapter(){
			public void run() {
				if(input!=null) {
					input.lock.lock();
					input.kPres.set(kPres.isSelected());
					input.kTemp.set(kTemp.isSelected());
					input.lock.unlock();
				}else log.warning(SimControls.this, "constants changed when nothing focused");
			}
		};
		kPres.addActionListener(constantsToModelLink);
		kDens.addActionListener(constantsToModelLink);
		kTemp.addActionListener(constantsToModelLink);
	}

	private final JComponent c;

	public JComponent getComponent() {
		return c;
	}
	
	private final JRadioButton kPres,kDens;
	private final JCheckBox kTemp;
	private JSpinner presSpinner,densSpinner,tempSpinner;
	private BoundedValue<Float> pressure,temperature,density;
	
	private InputParameters input;
	
	private final void link(InputParameters input) {
		assert input==null;
		this.input=input;
		
		//bind&create pres,temp,dens <-> spinners if not yet done, do layout here
		if(pressure==null) {
			pressure=input.desiredPressure.createCopy();
			temperature=input.desiredTemperature.createCopy();
			density=input.desiredDensity.createCopy();
			
			presSpinner=ControlFactory.createFloatSpinner(InputParameters.PRESSURE_STEP,pressure);
			densSpinner=ControlFactory.createFloatSpinner(InputParameters.DENSITY_STEP,density);
			tempSpinner=ControlFactory.createFloatSpinner(InputParameters.TEMPERATURE_STEP,temperature);
			
			c.add(kTemp);
			c.add(tempSpinner);
			c.add(LayoutUtils.mediumPad());
			c.add(kDens);
			c.add(densSpinner);
			c.add(LayoutUtils.mediumPad());
			c.add(kPres);
			c.add(presSpinner);
		}
		
		
	}
	private final void unlink() {
		input=null;
	}
}
