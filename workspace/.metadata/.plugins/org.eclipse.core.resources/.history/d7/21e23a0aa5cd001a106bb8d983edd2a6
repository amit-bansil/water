/*
 * CREATED ON:    Apr 16, 2006 3:30:50 PM
 * CREATED BY:    Amit Bansil 
 */
package cps.water.moleculedisplay;

import com.sun.j3d.utils.geometry.Box;
import com.sun.j3d.utils.geometry.Primitive;
import com.sun.j3d.utils.geometry.Sphere;
import com.sun.j3d.utils.universe.SimpleUniverse;

import cps.jarch.util.collections.ArrayFinal;
import cps.water.moleculedisplay.DisplayPanel.Atom;
import cps.water.moleculedisplay.DisplayPanel.Constants;
import cps.water.moleculedisplay.DisplayPanel.Molecule;
import cps.water.moleculedisplay.DisplayPanel.BallWaterMolecule.HydAtom;
import cps.water.moleculedisplay.DisplayPanel.BallWaterMolecule.OxAtom;
import cps.water.moleculedisplay.DisplayPanel.BallWaterMolecule.TrackGroup;
import cps.water.moleculedisplay.DisplayPanel.BallWaterMolecule.TrackGroup.TrackMaster;
import cps.water.simulation.Ion;
import cps.water.simulation.SimModel;

import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.ColoringAttributes;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.Group;
import javax.media.j3d.LineArray;
import javax.media.j3d.LineAttributes;
import javax.media.j3d.LineStripArray;
import javax.media.j3d.Material;
import javax.media.j3d.PolygonAttributes;
import javax.media.j3d.QuadArray;
import javax.media.j3d.Shape3D;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.vecmath.Color3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.TexCoord2f;
import javax.vecmath.Vector3f;

/**
 * <p>
 * Maintains a java3d representation of a SimModel using settings in a
 * DisplayModel. Controller should create a SceneGraph and connect it to a
 * Renderer which will draw it.
 * </p>
 * 
 * @version $Id$
 * @author Amit Bansil
 */
public class SceneGraph {
	final DisplayModel displayModel;
	final SimModel simModel;
	
	public SceneGraph(DisplayModel displayModel,SimModel simModel) {
		this.simModel=simModel;
		this.displayModel=displayModel;
	}
	
	// ------------------------------------------------------------------------
	//called by renderer to cause graph to be updated with minor chagnes to model
	final void update() {
		
	}
	//called by renderer to cause graph to be updated with major changes to model
	final void rebuild() {
		
	}
	// ------------------------------------------------------------------------
	//info needed by renderer
	Transform3D getViewTransform() {
		return null;
	}

	boolean isAAEnabled() {
		return false;
	}
	BranchGroup getRoot() {
		return content.getRoot();
	}
	
	// ------------------------------------------------------------------------

	//
	//graph
	
    
    private static abstract class Molecule extends BranchGroup{
    	Molecule(){
    		 setCapability(BranchGroup.ALLOW_DETACH);
    	}
    	public abstract void update();
    }
    private static class Atom extends TransformGroup{
    	private final Transform3D t3d = new Transform3D();
    	public Atom(){
    		setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
    	}
    	public void moveTo(Vector3f pos){	
    		t3d.set(pos);
    		setTransform(t3d);
    	}
    }
    private static class BallWaterMolecule extends Molecule{
    	//Feilds
    	protected final Atom[] atoms;
    	private final TrackGroup tg;
    	protected final int dRefNum;
    	private final Vector3f tPos=new Vector3f();
    	
    	private final class OxAtom extends Atom{
    		public OxAtom(){
    			addChild(Constants.createOAtom());
    		}
    	}
    	private final class HydAtom extends Atom{
    		public HydAtom(){
    			addChild(Constants.createHAtom());
    		}
    	}
    	//Track Group
    	private final class TrackGroup extends BranchGroup{
    		private final TrackMaster tmx, tmy, tmz;
    		private static final int XTRACK=0,YTRACK=1,ZTRACK=2;
    		
    		private final class TrackMaster extends TransformGroup{
    			public TrackMaster(int type){
        	    	addChild(Constants.getTrackSquare());
    			}
    		}
    		
    		public TrackGroup(){
    			tmx=new TrackMaster(XTRACK);
    			tmy=new TrackMaster(YTRACK);
    			tmz=new TrackMaster(ZTRACK);
    			addChild(tmx);
    			addChild(tmy);
    			addChild(tmz);
    		}
    		
    		private final Vector3f tempV = new Vector3f();
    		private final Transform3D tTrans = new Transform3D();
    		public void moveTo(float x, float y, float z){
    			//note optimizations	
    			tempV.set(x,0,z);
    			tTrans.set(tempV);
    			tmx.setTransform(tTrans);
    			
    			tempV.z=0;tempV.y=y;
    			tTrans.rotX(Math.PI/2f);
    			tTrans.setTranslation(tempV);
    			tmy.setTransform(tTrans);
    			
    			tempV.z=z; tempV.x=0;
    			tTrans.rotZ(-Math.PI/2f);
    			tTrans.setTranslation(tempV);
    			tmz.setTransform(tTrans);
    		}
    	}
    	//Public Methods
    	public BallWaterMolecule(EngineWrapper data, int dRefNum){
    		this.data=data; this.dRefNum = dRefNum;
    		atoms = new Atom[3];
    		
    		tg=new TrackGroup();
    		atoms[0]=new OxAtom(); addChild(atoms[0]);
    		atoms[1]=new HydAtom(); addChild(atoms[1]);
    		atoms[2]=new HydAtom(); addChild(atoms[2]);
    	}
    	public BallWaterMolecule(EngineWrapper data, int dRefNum, Atom[] a){
    		this.data=data; this.dRefNum=dRefNum;
    		tg=new TrackGroup();
    		atoms=a; for(int i=0;i<atoms.length;i++) addChild(atoms[i]);
    	}
            //does not add atoms
            protected BallWaterMolecule(EngineWrapper data, int dRefNum, boolean v){
    		this.data=data; this.dRefNum = dRefNum;
    		atoms = new Atom[3];
    		
    		tg=new TrackGroup();
    		atoms[0]=new OxAtom();
    		atoms[1]=new HydAtom();
    		atoms[2]=new HydAtom();
            }
            protected BallWaterMolecule(EngineWrapper data, int dRefNum, Atom[] a, boolean v){
    		this.data=data; this.dRefNum=dRefNum;
    		tg=new TrackGroup();
    		atoms=a;
    	}
    	public void update(){
    		tg.moveTo(data.getPX(dRefNum,data.O_ATOM),
    			data.getPY(dRefNum,data.O_ATOM),
    			data.getPZ(dRefNum,data.O_ATOM));
    		tPos.set(data.getPX(dRefNum,data.O_ATOM),
    			data.getPY(dRefNum,data.O_ATOM),
    			data.getPZ(dRefNum,data.O_ATOM));
    		atoms[0].moveTo(tPos);
    		tPos.set(data.getPX(dRefNum,data.H1_ATOM),
    			data.getPY(dRefNum,data.H1_ATOM),
    			data.getPZ(dRefNum,data.H1_ATOM));
    		atoms[1].moveTo(tPos);
    		tPos.set(data.getPX(dRefNum,data.H2_ATOM),
    			data.getPY(dRefNum,data.H2_ATOM),
    			data.getPZ(dRefNum,data.H2_ATOM));
    		atoms[2].moveTo(tPos);
    	}	
    }
    
    // ------------------------------------------------------------------------
    // display constants
    private static final class Constants{
        //sizes
        static final float trackSize = 0.16f;
        //static Point3f boundsSize = new Point3f(1f,1f,1f);//1;//2.5f;
        static final float hSize = 0.1f;
        static final float oSize = 0.16f;
        static final float originSize = 0.1f;
        //camera in I3DDisplay

        //colors
        static final Color3f ionColor
        = new Color3f(0.0f,0.7f,0.7f);
        static final Color3f gridColor
        = new Color3f(0.7f,0.7f,0.7f);
        static final Color3f boxColor
        = new Color3f(0.4f,0.4f,0.4f);
        static final Color3f oColor
        = new Color3f(0.9f,0.9f,0.9f);
        static final Color3f hColor
        = new Color3f(0.9f,0.0f,0.0f);
        static final Color3f originColor
        = new Color3f(0.75f,0.75f,0.75f);
        static final Color3f stickColor
        = new Color3f(0.8f,0.0f,0.0f);
        static final Color3f bondColor
        = new Color3f(0.0f,0.8f,0.8f);
        static final Color3f hilightColor
        = new Color3f(1f,1f,1f);
        static final Color3f depthColor
        = new Color3f(0,0,0);
        static final float MAT_ALPHA=0.05f;
        static final float PLANE_ALPHA=0.8f;
        //Shading System- NOT PORTABLE REQUIRES ONE O ATOM PER MOLECULE
        static final Color3f fullyShaded =
        new Color3f(1.0f,1.0f,1.0f);
        static final Color3f unShaded =
        new Color3f(0.3f,0.3f,0.3f);

        public static final Color3f mix(Color3f a, float wA, Color3f b, float wB){
            float x = ((a.x*wA)*(b.x*wB))/(wA+wB);
            float y = ((a.y*wA)*(b.y*wB))/(wA+wB);
            float z = ((a.z*wA)*(b.z*wB))/(wA+wB);
            return new Color3f(x,y,z);
        }
        /*static final float nw=EngineWrapper.numMols;
        public static final Color3f mix2(Color3f a,float n){
            return new Color3f(
            (unShaded.x+((fullyShaded.x-unShaded.x)*(n/nw)))*a.x,
            (unShaded.y+((fullyShaded.y-unShaded.y)*(n/nw)))*a.y,
            (unShaded.z+((fullyShaded.z-unShaded.z)*(n/nw)))*a.z);
        }*/
        public static final Appearance WireFrame = new Appearance();
        static{
            PolygonAttributes pa = new PolygonAttributes();
            pa.setPolygonMode(PolygonAttributes.POLYGON_LINE);
            WireFrame.setColoringAttributes( new ColoringAttributes(
            boxColor,ColoringAttributes.FASTEST));
            WireFrame.setPolygonAttributes(pa);
        }
        public static final Appearance IonWireFrame = new Appearance();
        static{
            PolygonAttributes pa = new PolygonAttributes();
            pa.setPolygonMode(PolygonAttributes.POLYGON_LINE);
            WireFrame.setColoringAttributes( new ColoringAttributes(
            boxColor,ColoringAttributes.FASTEST));
            WireFrame.setPolygonAttributes(pa);
        }
        public static Appearance createShadedMat(Color3f color){
            return createColoredMat(color); //LOOK AT NOTE 1
        }
        public static Appearance createTransparentMat(Color3f color){
            Appearance ret=createColoredMat(color);
            ret.setTransparencyAttributes(
            new TransparencyAttributes(TransparencyAttributes.BLENDED,MAT_ALPHA));
            return ret;
        }
        public static Appearance createPlaneMat(Color3f color){
            Appearance ret=createColoredMat(color);
            ret.setTransparencyAttributes(
            new TransparencyAttributes(TransparencyAttributes.BLENDED,PLANE_ALPHA));
            return ret;
        }
        public static Appearance createColoredMat(Color3f color){
            Material m = new Material(color, depthColor,
            color, hilightColor, 80.0f);
            m.setLightingEnable(true);
            Appearance app = new Appearance();
            app.setMaterial(m);
            return app;
        }
        public static Material createColoredMaterial(Color3f color){
            Material m = new Material(color, depthColor,
            color, hilightColor, 80.0f);
            m.setLightingEnable(true);
            return m;
        }
        public static Appearance createTrackFrameAppearance(){
            Appearance temp = new Appearance();
            PolygonAttributes pa = new PolygonAttributes();
            pa.setPolygonMode(PolygonAttributes.POLYGON_LINE);
            temp.setColoringAttributes( new ColoringAttributes(
            gridColor//NOTE 1
            ,ColoringAttributes.FASTEST));
            temp.setPolygonAttributes(pa);
            return temp;
        }
        public static Appearance createStickMoleculeAppearance(){
            Appearance temp = new Appearance();
            PolygonAttributes pa = new PolygonAttributes();
            pa.setPolygonMode(PolygonAttributes.POLYGON_LINE);
            temp.setColoringAttributes( new ColoringAttributes(
            stickColor
            ,ColoringAttributes.FASTEST));
            temp.setLineAttributes(new LineAttributes(2,LineAttributes.PATTERN_SOLID,
            false));
            temp.setPolygonAttributes(pa);
            return temp;
        }
        public static Appearance createBondAppearance(){
            Appearance temp = new Appearance();
            PolygonAttributes pa = new PolygonAttributes();
            pa.setPolygonMode(PolygonAttributes.POLYGON_LINE);
            temp.setColoringAttributes( new ColoringAttributes(
            bondColor
            ,ColoringAttributes.FASTEST));
            temp.setLineAttributes(new LineAttributes(1,LineAttributes.PATTERN_SOLID,
            false));
            temp.setPolygonAttributes(pa);
            return temp;
        }
        public static Sphere createTHAtom(){
            return new Sphere(hSize,
            Primitive.GENERATE_NORMALS, 8, createTransparentMat(hColor));
        }
        public static Sphere createHAtom(){
            Sphere atom = new Sphere(hSize,
            Primitive.GENERATE_NORMALS, 8, createShadedMat(hColor));
            return atom;
        }
        public static Sphere createMiniHAtom(){
            Sphere atom = new Sphere(hSize/3f,
            Primitive.GENERATE_NORMALS, 8/2, createShadedMat(hColor));
            return atom;
        }
        public static Sphere createTOAtom(){
            return new Sphere(oSize,
            Primitive.GENERATE_NORMALS, 10, createTransparentMat(oColor));
        }
        public static Sphere createOAtom(){
            Sphere atom = new Sphere(oSize,
            Primitive.GENERATE_NORMALS, 10, createShadedMat(oColor));
            return atom;
        }
        public static Sphere createMiniOAtom(){
            Sphere atom = new Sphere(oSize/3f,
            Primitive.GENERATE_NORMALS, 7, createShadedMat(oColor));
            return atom;
        }
        static Sphere createIonSphere(Ion ion) {
    		return new Sphere((float)ion.size, Primitive.GENERATE_NORMALS, 10,
    			createShadedMat(new Color3f(ion.r, ion.g, ion.b)));
    	}
        static Group createIonGroup(ArrayFinal<Ion> ions) {
    		Group g = new Group();

    		if (ions.getLength() == 1) {
    			g.addChild(createIonSphere(ions.get(0)));
    			return g;
    		} else if (ions.getLength() == 2) {
    			TransformGroup tg1 = new TransformGroup();
    			Transform3D t3d1 = new Transform3D();
    			TransformGroup tg2 = new TransformGroup();
    			Transform3D t3d2 = new Transform3D();
    			tg1.addChild(createIonSphere(ions.get(0)));
    			tg2.addChild(createIonSphere(ions.get(1)));
    			Vector3f distance = new Vector3f(Ion.getDistance(ions.get(0), ions.get(1)),
    				0, 0);
    			t3d1.set(distance);
    			Vector3f tv3f = new Vector3f(-distance.x, -distance.y, -distance.z);
    			t3d2.set(tv3f);
    			tg1.setTransform(t3d1);
    			tg2.setTransform(t3d2);
    			g.addChild(tg1);
    			g.addChild(tg2);
    			return g;
    		} else throw new IllegalArgumentException(
    			"ion groups can only be created for pairs of ions");
    	}
        static Box getOriginBox(){
            return new Box(originSize,originSize,
            originSize,createColoredMat(originColor));
        }
        static Shape3D getPlane(Point3f boundsSize){
            QuadArray geo=new QuadArray(4, GeometryArray.COORDINATES |
            GeometryArray.NORMALS |
            GeometryArray.TEXTURE_COORDINATE_2);
            Point3f[] coords=new Point3f[4];
            coords[0]=new Point3f(0,0,0);
            coords[1]=new Point3f(0,boundsSize.y,0);
            coords[2]=new Point3f(0,1,boundsSize.z);
            coords[3]=new Point3f(0,0,boundsSize.z);

            TexCoord2f[] texCoords=new TexCoord2f[4];
            texCoords[0]=new TexCoord2f(0,0);
            texCoords[1]=new TexCoord2f(1,0);
            texCoords[2]=new TexCoord2f(1,1);
            texCoords[3]=new TexCoord2f(0,1);

            Vector3f[] normals=new Vector3f[4];
            normals[0]=new Vector3f(1,0,0);
            normals[1]=new Vector3f(1,0,0);
            normals[2]=new Vector3f(1,0,0);
            normals[3]=new Vector3f(1,0,0);

            geo.setCoordinates(0,coords);
            geo.setTextureCoordinates(0,0,texCoords);
            geo.setNormals(0,normals);
            return new Shape3D(geo,createPlaneMat(new Color3f(1,1,1)));
        }
        static Shape3D getBoundsGrid(){
            LineStripArray boundsGeo = new LineStripArray(
        11,GeometryArray.COORDINATES, new int[]{11});

            Point3f[] cords = new Point3f[11];
            cords[0] = new Point3f(1/2f,-1/2f,-1/2f);
            cords[1] = new Point3f(-1/2f,-1/2f,-1/2f);
            cords[2] = new Point3f(-1/2f,-1/2f,1/2f);
            cords[3] = new Point3f(-1/2f,1/2f,1/2f);
            cords[4] = new Point3f(-1/2f,1/2f,-1/2f);
            cords[5] = new Point3f(1/2f,1/2f,-1/2f);
            cords[6] = new Point3f(1/2f,-1/2f,-1/2f);
            cords[7] = new Point3f(1/2f,-1/2f,1/2f);
            cords[8] = new Point3f(-1/2f,-1/2f,1/2f);
            cords[9] = new Point3f(-1/2f,-1/2f,-1/2f);
            cords[10] = new Point3f(-1/2f,1/2f,-1/2f);

            boundsGeo.setCoordinates(0,cords);

            return new Shape3D(boundsGeo,WireFrame);

        }
        static Shape3D createIonGrid(int res,Point3f boundsSize){
            res=res/2;
            LineArray boundsGeo = new LineArray(
            (res+1)*4,GeometryArray.COORDINATES);

            Point3f[] cords = new Point3f[(res+1)*4];
            for(int i=0;i<res+1;i++){
                cords[i*4]=new Point3f(0,0,(boundsSize.z/res)*i);
                cords[(i*4)+1]=new Point3f(0,boundsSize.y,(boundsSize.z/res)*i);
                cords[(i*4)+2]=new Point3f(0,(boundsSize.y/res)*i,0);
                cords[(i*4)+3]=new Point3f(0,(boundsSize.y/res)*i,boundsSize.z);
            }
            boundsGeo.setCoordinates(0,cords);

            return new Shape3D(boundsGeo,IonWireFrame);
        }
        static Bounds getBounds(Point3f boundsSize){
            return new BoundingBox(new Point3d(0,0,0),
            new Point3d(boundsSize.x,boundsSize.y,boundsSize.z));
        }
        static Shape3D getTrackSquare(){
            QuadArray trackGeo = new QuadArray( 4,
            	GeometryArray.COORDINATES);

            trackGeo.setCoordinate(0,new Point3f(trackSize,0f,trackSize));
            trackGeo.setCoordinate(1,new Point3f(trackSize,0f,-trackSize));
            trackGeo.setCoordinate(2,new Point3f(-trackSize,0f,-trackSize));
            trackGeo.setCoordinate(3,new Point3f(-trackSize,0f,trackSize));

            return new Shape3D(trackGeo,createTrackFrameAppearance());
        }
    }
    // ------------------------------------------------------------------------
    // utils
    private static float avgBoundsSize(Point3f boundsSize){
        return (boundsSize.x+boundsSize.y+boundsSize.z)/3f;
    }
    private static float maxBound(Point3f boundsSize){
        if( boundsSize.x>=boundsSize.y){
            if( boundsSize.x>=boundsSize.z){
                return boundsSize.x;
            }else{
                return boundsSize.z;
            }
        }else if(boundsSize.z>=boundsSize.y){
            return boundsSize.z;
        }else{
            return boundsSize.y;
        }
    }
    private static void removeAllChildren(BranchGroup g){
        int n=g.numChildren();
        for(int i=0;i<n;i++){
            g.removeChild(0);
        }
    }
    // ------------------------------------------------------------------------
    // contents    
    private final Content content;
    private static final class Content{
    	public BranchGroup getRoot() {
    		return objRoot;
    	}
    	
        private Molecule[] molecules;
        private final BranchGroup objRoot=new BranchGroup();
        private final BranchGroup moleculeRoot=new BranchGroup();
        private final BranchGroup ionRoot=new BranchGroup();
        
    	public Content(){

            objRoot.addChild(moleculeRoot);
            objRoot.addChild(ionRoot);

            lightScene(objRoot);
            addSceneBox(objRoot);

            moleculeRoot.setCapability(Group.ALLOW_CHILDREN_EXTEND);
            moleculeRoot.setCapability(Group.ALLOW_CHILDREN_WRITE);
            moleculeRoot.setCapability(Group.ALLOW_CHILDREN_READ);
            moleculeRoot.setCapability(BranchGroup.ALLOW_DETACH);

            ionRoot.setCapability(Group.ALLOW_CHILDREN_EXTEND);
            ionRoot.setCapability(Group.ALLOW_CHILDREN_WRITE);
            ionRoot.setCapability(Group.ALLOW_CHILDREN_READ);

            objRoot.setCapability(BranchGroup.ALLOW_DETACH);

            objRoot.compile();
    	}
    }
}
